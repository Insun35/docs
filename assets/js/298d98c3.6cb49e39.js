"use strict";(self.webpackChunkinterrep_docs=self.webpackChunkinterrep_docs||[]).push([[924],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return c}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),l=d(n),c=a,h=l["".concat(s,".").concat(c)]||l[c]||u[c]||i;return n?r.createElement(h,o(o({ref:t},m),{},{components:n})):r.createElement(h,o({ref:t},m))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=l;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var d=2;d<i;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},7177:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return m},default:function(){return l}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],p={title:"InterRep groups"},s="Using InterRep groups",d={unversionedId:"tutorials/interrep-groups",id:"tutorials/interrep-groups",isDocsHomePage:!1,title:"InterRep groups",description:"In this section, we will learn how to integrate our InterRep groups in your application.",source:"@site/docs/tutorials/interrep-groups.md",sourceDirName:"tutorials",slug:"/tutorials/interrep-groups",permalink:"/tutorials/interrep-groups",editUrl:"https://github.com/InterRep/docs/edit/main/docs/tutorials/interrep-groups.md",tags:[],version:"current",frontMatter:{title:"InterRep groups"},sidebar:"tutorialSidebar",previous:{title:"Onchain groups",permalink:"/technical-overview/groups/onchain-groups"},next:{title:"API",permalink:"/api"}},m=[{value:"1. Generate a OAuth token",id:"1-generate-a-oauth-token",children:[]},{value:"2. Calculate the user&#39;s reputation",id:"2-calculate-the-users-reputation",children:[]},{value:"3. Create the identity commitment",id:"3-create-the-identity-commitment",children:[]},{value:"4. Add the identity commitment to a group",id:"4-add-the-identity-commitment-to-a-group",children:[]},{value:"5. Get the Merkle tree proof",id:"5-get-the-merkle-tree-proof",children:[]},{value:"6. Create a zero-knowledge proof",id:"6-create-a-zero-knowledge-proof",children:[]}],u={toc:m};function l(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"using-interrep-groups"},"Using InterRep groups"),(0,i.kt)("p",null,"In this section, we will learn how to integrate our InterRep groups in your application."),(0,i.kt)("p",null,"InterRep allows users to join groups anonymously, so that these groups can then be used by DApps and external services to allow, for example, only certain categories of users to authenticate or to unlock certain features based on the user's group. Each group has a certain provider and a name (which coincides with the reputation when there is a OAuth provider). A user with a gold reputation on Twitter can, for example, join the relevant group and access another application by proving that they are part of the group and therefore have a gold reputation."),(0,i.kt)("p",null,"The groups are basically composed of a set of Semaphore identity commitments organized in Merkle trees. Thanks to Semaphore it is possible to create a zero-knowledge proof to prove that a user is a member of the group (or a leaf of the tree) without revealing their identity."),(0,i.kt)("p",null,"In the following steps we will use ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/InterRep/interrep.js/tree/main/packages/api"},(0,i.kt)("inlineCode",{parentName:"a"},"@interrep/api")),", a JavaScript library to wrap our REST APIs. If you want to use our API directly, you can find them in the ",(0,i.kt)("a",{parentName:"p",href:"/api"},"API")," section."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Before going any further, if you are not familiar with Semaphore, read the ",(0,i.kt)("a",{parentName:"p",href:"https://semaphore.appliedzkp.org"},"official documentation"),"."))),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"If you want to integrate the whole onboarding flow into your UI, follow all the steps. Otherwise, if you want to redirect the user to our app to allow him/her to join a group, follow the steps in the following order: 3, 5, 6. Just remember that for Email and Telegram providers you can't use the API to add and remove id commitment in groups."))),(0,i.kt)("h2",{id:"1-generate-a-oauth-token"},"1. Generate a OAuth token"),(0,i.kt)("p",null,"If you want to allow a user to join a group directly from your app without going through the InterRep app, you will need to create a OAuth authentication system to generate a valid access token in order to calculate the users' reputation and to add their identity commitment to a InterRep group. You can get the list of our supported providers with our ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/InterRep/interrep.js/tree/main/packages/api"},(0,i.kt)("inlineCode",{parentName:"a"},"@interrep/api"))," package."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'import { API } from "@interrep/api"\n\nconst api = new API()\nconst providers = await api.getProviders()\n\nconsole.log(providers) // ["twitter", "github", "reddit", "poap", "telegram", "email"]\n')),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You only need to create a token if the provider is a OAuth provider (e.g. Twitter, Reddit, Github). For the Web3 providers (e.g POAP) you can skip the steps 1 and 2. As we will see later, it is sufficient to sign the identity commitment with Metamask and send the signature and the address of the Ethereum account used to sign."))),(0,i.kt)("h2",{id:"2-calculate-the-users-reputation"},"2. Calculate the user's reputation"),(0,i.kt)("p",null,"Once you have generated a valid OAuth token and are able to obtain the user's account data you can calculate their reputation with our ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/InterRep/interrep.js/tree/main/packages/reputation"},(0,i.kt)("inlineCode",{parentName:"a"},"@interrep/reputation"))," package."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'import { calculateReputation, OAuthProvider } from "@interrep/reputation"\n\n// \'getGithubUserByToken\' is an example function.\nconst { id, plan, followers, receivedStars } = await getGithubUserByToken(token)\n\nconst reputation = calculateReputation(OAuthProvider.GITHUB, {\n    proPlan: plan.name === "pro",\n    followers,\n    receivedStars\n})\n\nconsole.log(reputation) // gold\n')),(0,i.kt)("h2",{id:"3-create-the-identity-commitment"},"3. Create the identity commitment"),(0,i.kt)("p",null,"Creating an Semaphore identity commitment is quite simple. InterRep provides an ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/InterRep/interrep.js/tree/main/packages/identity"},(0,i.kt)("inlineCode",{parentName:"a"},"@interrep/identity"))," package to create a Semaphore identity (",(0,i.kt)("a",{parentName:"p",href:"https://github.com/appliedzkp/libsemaphore/tree/master/packages/identity"},(0,i.kt)("inlineCode",{parentName:"a"},"@libsem/identity")),"). You will also need ",(0,i.kt)("a",{parentName:"p",href:"https://metamask.io/"},"Metamask")," and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/ethers-io/ethers.js/"},"Ethers.js")," (or ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/ChainSafe/web3.js"},"Web3.js"),") to sign the InterRep message. If you want to see how ",(0,i.kt)("inlineCode",{parentName:"p"},"@interrep/identity")," works you can try our ",(0,i.kt)("a",{parentName:"p",href:"https://js.interrep.link/identity/"},"demo"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'import createIdentity from "@interrep/identity"\nimport detectEthereumProvider from "@metamask/detect-provider"\nimport { ethers } from "ethers"\n\nconst ethereumProvider = await detectEthereumProvider()\nconst provider = new ethers.providers.Web3Provider(ethereumProvider)\nconst signer = provider.getSigner()\n\nfunction sign(message: string): Promise<string> {\n    return signer.signMessage(message)\n}\n\nconst identity = await createIdentity(sign, "github")\nconst identityCommitment = identity.genIdentityCommitment().toString()\n')),(0,i.kt)("h2",{id:"4-add-the-identity-commitment-to-a-group"},"4. Add the identity commitment to a group"),(0,i.kt)("p",null,"To add an identity commitment to a group you need a OAuth token if there is a OAuth provider or the signature of the identity commitment and the Ethereum account address if there is a Web3 provider."),(0,i.kt)("p",null,"The POST methods of our APIs are restricted to a list of domains defined in a whitelist. If you want to add your own domain please contact us or open a pull request. You can find the configuration file ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/InterRep/reputation-service/blob/main/src/config.ts"},"here"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Adding identity commitments to groups with reputation providers (e.g Github)."',title:'"Adding',identity:!0,commitments:!0,to:!0,groups:!0,with:!0,reputation:!0,providers:!0,"(e.g":!0,'Github)."':!0},'await api.addIdentityCommitment({\n    provider: "github",\n    name: reputation,\n    identityCommitment,\n    authenticationHeader: `token ${token}`\n})\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Adding identity commitments to groups with Web3 providers (e.g POAP)."',title:'"Adding',identity:!0,commitments:!0,to:!0,groups:!0,with:!0,Web3:!0,providers:!0,"(e.g":!0,'POAP)."':!0},'import detectEthereumProvider from "@metamask/detect-provider"\nimport { ethers } from "ethers"\n\nconst ethereumProvider = await detectEthereumProvider()\nconst provider = new ethers.providers.Web3Provider(ethereumProvider)\nconst signer = provider.getSigner()\n\nconst userSignature = await signer.signMessage(identityCommitment)\nconst userAddress = await signer.getAddress()\n\nawait api.addIdentityCommitment({\n    provider: "poap",\n    name: "devcon4",\n    identityCommitment,\n    userAddress,\n    userSignature\n})\n')),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"If you need to get our supported groups you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"api.getGroups()")," function."))),(0,i.kt)("h2",{id:"5-get-the-merkle-tree-proof"},"5. Get the Merkle tree proof"),(0,i.kt)("p",null,"After the user is part of a group, you can obtain the Merkle tree proof needed to generate the proof of membership with Semaphore."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'const proof = await api.getMerkleTreeProof({\n    provider: "github",\n    name: reputation,\n    identityCommitment\n})\n')),(0,i.kt)("h2",{id:"6-create-a-zero-knowledge-proof"},"6. Create a zero-knowledge proof"),(0,i.kt)("p",null,"At this point you have all the necessary parameters to generate a zero-knowledge proof with Semaphore."))}l.isMDXComponent=!0}}]);